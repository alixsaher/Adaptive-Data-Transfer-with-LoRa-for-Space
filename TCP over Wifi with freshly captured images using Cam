#include "esp_camera.h"
#include "FS.h"
#include "SD_MMC.h"
#include <WiFi.h>

// ==== Change these ====
const char* ssid = "Airtel";
const char* password = "saherali";
const char* receiver_ip = "192.168.1.29"; // Receiver ESP / PC IP
const uint16_t receiver_port = 12345;     // Receiver TCP port
// ======================

// AI Thinker pin configuration
#define PWDN_GPIO_NUM  32
#define RESET_GPIO_NUM -1
#define XCLK_GPIO_NUM  0
#define SIOD_GPIO_NUM  26
#define SIOC_GPIO_NUM  27
#define Y9_GPIO_NUM    35
#define Y8_GPIO_NUM    34
#define Y7_GPIO_NUM    39
#define Y6_GPIO_NUM    36
#define Y5_GPIO_NUM    21
#define Y4_GPIO_NUM    19
#define Y3_GPIO_NUM    18
#define Y2_GPIO_NUM    5
#define VSYNC_GPIO_NUM 25
#define HREF_GPIO_NUM  23
#define PCLK_GPIO_NUM  22

#define LED_GPIO_NUM   4 // onboard flash LED

void setup() {
  Serial.begin(115200);
  Serial.println();

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  // Camera config
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  
  if (psramFound()) {
    config.frame_size = FRAMESIZE_VGA;
    config.jpeg_quality = 8; // Lower value for higher quality
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 10; // Lower value for higher quality
    config.fb_count = 1;
  }

  // Init camera
  if (esp_camera_init(&config) != ESP_OK) {
    Serial.println("Camera init failed");
    return;
  }

  // Get the sensor object to modify settings
  sensor_t *s = esp_camera_sensor_get();
  if (s == NULL) {
      Serial.println("Sensor not found!");
      return;
  }
  
  // Set AWB and AWB_GAIN
  s->set_awb_gain(s, 2); // Enable AWB Gain
  s->set_whitebal(s, 1); // Enable Auto White Balance
  
  // You can also fine-tune brightness, contrast, and saturation like in the UI
  s->set_brightness(s, 2); // -2 to 2
  s->set_contrast(s, 0); // -2 to 2
  s->set_saturation(s, 1); // -2 to 2

  // Flash pin setup
  pinMode(LED_GPIO_NUM, OUTPUT);
  digitalWrite(LED_GPIO_NUM, LOW); // make sure it's off

  // Countdown before capture
  for (int i = 3; i > 0; i--) {
    Serial.printf("%d...\n", i);
    delay(1000);
  }
  Serial.println("ðŸ“¸ Capturing now...");

  // Turn on flash just before capture
  digitalWrite(LED_GPIO_NUM, HIGH);
  delay(1000);// short delay for light to stabilize

  // Capture photo
  camera_fb_t *fb = esp_camera_fb_get();
  delay(200);
  // Turn off flash immediately after capture
  digitalWrite(LED_GPIO_NUM, LOW);

  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }

  // Init SD card
  if (!SD_MMC.begin("/sdcard", true)) {
    Serial.println("SD Card Mount Failed");
    esp_camera_fb_return(fb);
    return;
  }

  // Save to file
  String path = "/pictures/Testimage1.jpg";
  fs::FS &fs = SD_MMC;
  if (!fs.exists("/pictures")) {
    fs.mkdir("/pictures");
  }

  File file = fs.open(path.c_str(), FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file in writing mode");
    esp_camera_fb_return(fb);
    return;
  }
  file.write(fb->buf, fb->len);
  Serial.printf("Saved photo to: %s (%u bytes)\n", path.c_str(), fb->len);
  file.close();

  esp_camera_fb_return(fb);
  esp_camera_deinit();

  // Send file over TCP
  WiFiClient client;
  Serial.println("Connecting to receiver...");
  if (!client.connect(receiver_ip, receiver_port)) {
    Serial.println("Connection failed");
    return;
  }

  file = fs.open(path.c_str(), FILE_READ);
  if (!file) {
    Serial.println("Failed to open file for reading");
    return;
  }

  Serial.println("Sending file...");
  uint8_t buf[1024];
  size_t len;
  while ((len = file.read(buf, sizeof(buf))) > 0) {
    client.write(buf, len);
  }
  file.close();
  client.stop();
  Serial.println("File sent successfully!");
}

void loop() {}


---------------------------------------------------------------

//ESP- DEV TX CODE
#include <WiFi.h>
#include "FS.h"
#include "SPIFFS.h"
#include <WebServer.h>

// ==== Change these ====
const char* ssid = "Airtel";
const char* password = "saherali";
const uint16_t listen_port = 12345;
// =======================

WiFiServer tcpServer(listen_port);
WebServer webServer(80);

void serveImage() {
  File file = SPIFFS.open("/received.jpg", FILE_READ);
  if (!file) {
    webServer.send(404, "text/plain", "No image found");
    return;
  }
  webServer.streamFile(file, "image/jpeg");
  file.close();
}

void serveHTML() {
  String html = "<html><body style='text-align:center;'>";
  html += "<h1>Last Received Image</h1>";
  html += "<img src='/image' style='max-width:90%;height:auto;'/>";
  html += "</body></html>";
  webServer.send(200, "text/html", html);
}

void setup() {
  Serial.begin(115200);

  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS Mount Failed");
    return;
  }

  tcpServer.begin();
  Serial.printf("TCP Server started on port %d\n", listen_port);

  webServer.on("/", serveHTML);
  webServer.on("/image", serveImage);
  webServer.begin();
}

void loop() {
  // Handle web requests
  webServer.handleClient();

  // Handle TCP file reception
  WiFiClient client = tcpServer.available();
  if (client) {
    Serial.println("Client connected, receiving file...");

    File file = SPIFFS.open("/received.jpg", FILE_WRITE);
    if (!file) {
      Serial.println("Failed to open file for writing");
      client.stop();
      return;
    }

    uint8_t buffer[1024];
    size_t totalBytes = 0, chunkCount = 0;

    while (client.connected()) {
      while (client.available()) {
        size_t bytesRead = client.read(buffer, sizeof(buffer));
        if (bytesRead > 0) {
          file.write(buffer, bytesRead);
          totalBytes += bytesRead;
          chunkCount++;
        }
      }
    }

    file.close();
    client.stop();
    Serial.printf("File received! Size: %u bytes, Chunks: %u\n", totalBytes, chunkCount);
  }
}
