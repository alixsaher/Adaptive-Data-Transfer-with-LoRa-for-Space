//cam code is same as before
#include "esp_camera.h"
#include "FS.h"
#include "SD_MMC.h"
#include <WiFi.h>

// ==== Change these ====
const char* ssid = "Saher";
const char* password = "ssssssss";
const char* receiver_ip = "192.168.186.36"; // Receiver ESP / PC IP
const uint16_t receiver_port = 12345;     // Receiver TCP port
// ======================

// AI Thinker pin configuration
#define PWDN_GPIO_NUM  32
#define RESET_GPIO_NUM -1
#define XCLK_GPIO_NUM  0
#define SIOD_GPIO_NUM  26
#define SIOC_GPIO_NUM  27
#define Y9_GPIO_NUM    35
#define Y8_GPIO_NUM    34
#define Y7_GPIO_NUM    39
#define Y6_GPIO_NUM    36
#define Y5_GPIO_NUM    21
#define Y4_GPIO_NUM    19
#define Y3_GPIO_NUM    18
#define Y2_GPIO_NUM    5
#define VSYNC_GPIO_NUM 25
#define HREF_GPIO_NUM  23
#define PCLK_GPIO_NUM  22

#define LED_GPIO_NUM   4 // onboard flash LED

void setup() {
  Serial.begin(115200);
  Serial.println();

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  // Camera config
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  if (psramFound()) {
    config.frame_size = FRAMESIZE_VGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 15;
    config.fb_count = 1;
  }

  if (esp_camera_init(&config) != ESP_OK) {
    Serial.println("Camera init failed");
    return;
  }

  // Flash pin setup
  pinMode(LED_GPIO_NUM, OUTPUT);
  digitalWrite(LED_GPIO_NUM, LOW); // make sure it's off

  // Countdown before capture
  for (int i = 3; i > 0; i--) {
    Serial.printf("%d...\n", i);
    delay(1000);
  }
  Serial.println("ðŸ“¸ Capturing now...");

  // Turn on flash just before capture
  digitalWrite(LED_GPIO_NUM, HIGH);
   delay(1000);// short delay for light to stabilize

  // Capture photo
  camera_fb_t *fb = esp_camera_fb_get();
  delay(200);
  // Turn off flash immediately after capture
  digitalWrite(LED_GPIO_NUM, LOW);

  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }

  // Init SD card
  if (!SD_MMC.begin("/sdcard", true)) {
    Serial.println("SD Card Mount Failed");
    esp_camera_fb_return(fb);
    return;
  }

  // Save to file
  String path = "/pictures/Testimage1.jpg";
  fs::FS &fs = SD_MMC;
  if (!fs.exists("/pictures")) {
    fs.mkdir("/pictures");
  }

  File file = fs.open(path.c_str(), FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file in writing mode");
    esp_camera_fb_return(fb);
    return;
  }
  file.write(fb->buf, fb->len);
  Serial.printf("Saved photo to: %s (%u bytes)\n", path.c_str(), fb->len);
  file.close();

  esp_camera_fb_return(fb);
  esp_camera_deinit();

  // Send file over TCP
  WiFiClient client;
  Serial.println("Connecting to receiver...");
  if (!client.connect(receiver_ip, receiver_port)) {
    Serial.println("Connection failed");
    return;
  }

  file = fs.open(path.c_str(), FILE_READ);
  if (!file) {
    Serial.println("Failed to open file for reading");
    return;
  }

  Serial.println("Sending file...");
  uint8_t buf[1024];
  size_t len;
  while ((len = file.read(buf, sizeof(buf))) > 0) {
    client.write(buf, len);
  }
  file.close();
  client.stop();
  Serial.println("File sent successfully!");
}

void loop() {}


--------------------------------------------------------------------------------------------------------------------------------

//TX:
// ================== TX (ESP32-WROOM) ==================
// - Phase 1: Send "Hi" every 200ms (RSSI scan)
// - Phase 2: Send sensor data (40 packets)
// - Phase 3: Receive image over TCP and forward via LoRa in chunks with ACK/retries

#include <HardwareSerial.h>
#include <WiFi.h>
#include "FS.h"
#include "SPIFFS.h"
#include <Wire.h>
#include <Adafruit_BMP280.h>
#include <DHT.h>

// --- WiFi & TCP Server Config ---
const char* ssid = "Airtel";
const char* password = "saherali";
const uint16_t listen_port = 12345;
WiFiServer tcpServer(listen_port);

// === GY-91 (MPU9250 + BMP280) ===
#define MPU_ADDR 0x68
#define BMP_ADDR 0x76
Adafruit_BMP280 bmp;

// === DHT11 ===
#define DHT_PIN 14
#define DHT_TYPE DHT11
DHT dht(DHT_PIN, DHT_TYPE);

// === LoRa UART ===
#define LORA_RX 4
#define LORA_TX 5
HardwareSerial LoRaSerial(1); // UART1

// --- Reyax config ---
const unsigned long REYAX_BAUD = 115200;
const uint16_t REYAX_TX_ADDR = 7;
const uint16_t REYAX_DST_ADDR = 12;
const size_t CHUNK_RAW = 10;            // bytes per chunk
const unsigned long ACK_TIMEOUT_MS = 8000UL;
const uint8_t MAX_RETRIES = 5;

// --- Timing and State Management ---
unsigned long lastSend = 0;
const unsigned long hiInterval = 200;       // send "Hi" every 200ms
const unsigned long sensorInterval = 1000;  // sensor packets every 1s
bool sendingHi = true;
bool sendingSensorData = false;
bool awaitingImage = false;
int sensorPacketsSent = 0;
const int maxSensorPackets = 40;

// ======================================================
// === Sensor Read Function ===
String readSensorString() {
  // --- Read MPU accel+gyro ---
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_ADDR, 14, true);

  int16_t AcX = Wire.read() << 8 | Wire.read();
  int16_t AcY = Wire.read() << 8 | Wire.read();
  int16_t AcZ = Wire.read() << 8 | Wire.read();
  Wire.read(); Wire.read();
  int16_t GyX = Wire.read() << 8 | Wire.read();
  int16_t GyY = Wire.read() << 8 | Wire.read();
  int16_t GyZ = Wire.read() << 8 | Wire.read();

  float Ax = AcX / 16384.0;
  float Ay = AcY / 16384.0;
  float Az = AcZ / 16384.0;
  float Gx = GyX / 131.0;
  float Gy = GyY / 131.0;
  float Gz = GyZ / 131.0;

  // --- BMP280 ---
  float temperature = bmp.readTemperature();
  float pressure = bmp.readPressure() / 100.0F;
  float altitude = bmp.readAltitude(1013.25);

  // --- DHT11 ---
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  String output = String(Ax, 2) + "," + String(Ay, 2) + "," + String(Az, 2) + ",";
  output += String(Gx, 2) + "," + String(Gy, 2) + "," + String(Gz, 2) + ",";
  output += String(temperature, 1) + "," + String(pressure, 1) + "," + String(altitude, 1) + ",";
  output += String(t, 1) + "," + String(h, 1);

  return output;
}

// ======================================================
// === LoRa Communication Functions ===
void flushReyaxInput() { while (LoRaSerial.available()) LoRaSerial.read(); }

bool sendATCommand(const String &cmd, unsigned long timeout=1000) {
  flushReyaxInput();
  LoRaSerial.print(cmd); LoRaSerial.print("\r\n");
  unsigned long t0 = millis();
  String resp = "";
  while (millis() - t0 < timeout) {
    while (LoRaSerial.available()) {
      char c = (char)LoRaSerial.read();
      resp += c;
      if (resp.endsWith("\r\nOK\r\n")) return true;
      if (resp.indexOf("ERROR") >= 0) return false;
    }
  }
  return false;
}

String toHex(const uint8_t *data, size_t len) {
  static const char hexchars[] = "0123456789ABCDEF";
  String s; s.reserve(len*2+4);
  for(size_t i=0;i<len;i++){uint8_t b=data[i]; s+=hexchars[b>>4]; s+=hexchars[b&0x0F];}
  return s;
}

// Wait for ACK:<seq> from RX
bool waitForACK(uint16_t seq, unsigned long timeoutMs) {
  unsigned long t0 = millis();
  String incoming = "";
  while (millis() - t0 < timeoutMs) {
    while (LoRaSerial.available()) {
      char c = (char)LoRaSerial.read();
      incoming += c;
      if (incoming.endsWith("\r\n")) {
        int p = incoming.indexOf("ACK:");
        if (p >= 0) {
          String seqStr = incoming.substring(p + 4);
          seqStr.trim();
          long rseq = seqStr.toInt();
          incoming = "";
          if (rseq == seq) return true;
        } else {
          incoming = "";
        }
      }
    }
    delay(5);
  }
  return false;
}

void setupReyax() {
  LoRaSerial.begin(REYAX_BAUD, SERIAL_8N1, LORA_RX, LORA_TX);
  delay(100);
  sendATCommand("AT+ADDRESS=" + String(REYAX_TX_ADDR), 1500);
  flushReyaxInput();
}

void sendLoRaPacket(const String &payload) {
  String cmd = "AT+SEND=" + String(REYAX_DST_ADDR) + "," + String(payload.length()) + "," + payload;
  LoRaSerial.print(cmd); LoRaSerial.print("\r\n");
  Serial.println("Sent packet: " + payload);
}

// --- File sender (with retries) ---
void sendFileOverLoRa(const char *path) {
  File f = SPIFFS.open(path, FILE_READ);
  if (!f) { Serial.println("Failed to open file"); return; }
  size_t total = f.size();
  Serial.printf("Sending file size: %u bytes\n", (unsigned) total);

  // Notify RX
  sendLoRaPacket("HDR:" + String(total));
  delay(500);

  uint8_t buf[CHUNK_RAW];
  uint16_t seq = 0;
  size_t sentBytes = 0;

  while (sentBytes < total) {
    size_t toRead = min(CHUNK_RAW, total - sentBytes);
    size_t r = f.read(buf, toRead);
    if (r == 0) break;

    String hexstr = toHex(buf, r);
    char seqStr[8]; sprintf(seqStr, "%04u", seq);
    String packet = "H:" + String(seqStr) + ":" + hexstr;

    bool acked = false;
    for (uint8_t attempt=1; attempt<=MAX_RETRIES; attempt++) {
      String cmd = "AT+SEND=" + String(REYAX_DST_ADDR) + "," + String(packet.length()) + "," + packet;
      LoRaSerial.print(cmd); LoRaSerial.print("\r\n");
      Serial.println("Sent image packet: " + packet);
      if (waitForACK(seq, ACK_TIMEOUT_MS)) { acked = true; break; }
      Serial.printf("Retry %d for seq %u\n", attempt, seq);
      delay(200);
    }
    if (!acked) {
      Serial.printf("Chunk %u failed after %d retries. Abort.\n", seq, MAX_RETRIES);
      f.close();
      return;
    }
    sentBytes += r;
    seq++;
    delay(30);
  }
  sendLoRaPacket("END");
  Serial.println("Sent END");
  f.close();
}

// ======================================================
// === Setup ===
void setup() {
  Serial.begin(115200);
  Wire.begin(21, 22);
  dht.begin();

  // Wake up MPU
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);

  if (!bmp.begin(BMP_ADDR)) {
    Serial.println("BMP280 not found!");
    while (1);
  }

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  unsigned long startAttemptTime = millis();
  const unsigned long wifiTimeout = 15000;
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < wifiTimeout) {
    delay(300);
    Serial.print(".");
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.printf("\nConnected. IP: %s\n", WiFi.localIP().toString().c_str());
  } else {
    Serial.println("\nWiFi connection failed. Halting.");
    while (true) delay(1000);
  }

  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS Mount Failed. Halting.");
    while (true) delay(1000);
  }

  setupReyax();
  tcpServer.begin();
  Serial.println("ðŸš€ LoRa TX & WebServer Started");
}

// ======================================================
// === Main Loop ===
void loop() {
  unsigned long now = millis();

  // --- Phase 1: Send "Hi" ---
  if (sendingHi) {
    if (now - lastSend >= hiInterval) {
      lastSend = now;
      sendLoRaPacket("Hi");
    }
    static unsigned long hiStart = millis();
    if (millis() - hiStart >= 20000) {
      sendingHi = false;
      sendingSensorData = true;
      lastSend = 0;
      Serial.println("âœ… Switching to sensor data transmission...");
      delay(2000);
    }
  }

  // --- Phase 2: Send sensor data ---
  else if (sendingSensorData) {
    if (sensorPacketsSent < maxSensorPackets) {
      if (now - lastSend >= sensorInterval) {
        lastSend = now;
        String payload = readSensorString();
        sendLoRaPacket(payload);
        sensorPacketsSent++;
      }
    } else {
      sendingSensorData = false;
      awaitingImage = true;
      Serial.println("âœ… Finished sending sensor data. Awaiting image upload...");
    }
  }

  // --- Phase 3: Receive image and send over LoRa ---
  else if (awaitingImage) {
    WiFiClient client = tcpServer.available();
    if (client) {
      Serial.println("ðŸ“¸ Receiving image via TCP...");
      File file = SPIFFS.open("/to_send.jpg", FILE_WRITE);
      if (!file) { client.stop(); return; }
      uint8_t buffer[1024];
      size_t totalBytes = 0;
      unsigned long lastRecv = millis();
      while (client.connected()) {
        while (client.available()) {
          size_t br = client.read(buffer, sizeof(buffer));
          if (br > 0) {
            file.write(buffer, br);
            totalBytes += br;
            lastRecv = millis();
          }
        }
        if (millis() - lastRecv > 2000) break;
        delay(10);
      }
      file.close();
      client.stop();
      Serial.printf("âœ… TCP received %u bytes\n", (unsigned) totalBytes);
      sendFileOverLoRa("/to_send.jpg");
      awaitingImage = false;
      Serial.println("Image transmission complete. Restarting cycle...");
      sendingHi = true;
      sensorPacketsSent = 0;
    }
  }
}



-----------------------------------------------------------------------------------------------------------------------------------------------------------




// RX (DevKit) - receive chunked image via Reyax LoRa and save to SD (then display on TFT)
#include <HardwareSerial.h>
#include <ESP32Servo.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ILI9341.h>
#include <SD.h>
#include <JPEGDecoder.h>

// === LoRa Serial ===
HardwareSerial LoRaSerial(1); // For the sensor data part
HardwareSerial &reyax = Serial2; // For the image data part
const unsigned long REYAX_BAUD = 115200;
const uint8_t REYAX_ADDR = 12; // this RX module's Reyax address
const uint8_t REYAX_TX_ADDR = 7; // remote (TX) Reyax address to reply ACKs
const int REYAX_RX_PIN = 16; // Reyax TX -> ESP RX
const int REYAX_TX_PIN = 17; // Reyax RX <- ESP TX

// === Servo ===
Servo antennaServo;
#define SERVO_PIN 13

// === LoRa UART Pins ===
#define LORA_RX 16
#define LORA_TX 17

// === TFT Display Pins ===
#define TFT_CS 5
#define TFT_DC 2
#define TFT_RST 4
#define SD_CS 14

Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_RST);

// === Reyax config ===
const uint16_t REYAX_TX_ADDR_SENSOR = 7; // TX address from the sensor data snippet
const uint16_t REYAX_DST_ADDR = 12; // RX address from the sensor data snippet

// === Servo Scan Settings ===
const int stepAngle = 15;
const int scanDelay = 2000;
int bestRSSI = -999;
int bestAngle = 0;

int packetCount = 0;
const int maxPackets = 12; // between 10 and 15

// === Image receiving state ===
bool receiving = false;
uint32_t expectedSize = 0;
uint32_t receivedBytes = 0;
String partialLine = "";
const char *SD_IMG_PATH = "/IM.JPG";
const size_t CHUNK_RAW = 10;
#define MAX_CHUNKS 2048 // adjust if you expect bigger images
bool seqReceived[MAX_CHUNKS] = {false};

// --- LoRa Functions ---
void sendLoRaPacket(const String& payload) {
  String cmd = "AT+SEND=" + String(REYAX_DST_ADDR) + "," + String(payload.length()) + "," + payload;
  LoRaSerial.print(cmd);
  LoRaSerial.print("\r\n");
  Serial.println("Sent: " + payload);
}

// --- Reyax Functions ---
void setupReyax() {
  reyax.begin(REYAX_BAUD, SERIAL_8N1, REYAX_RX_PIN, REYAX_TX_PIN);
  delay(150);
  Serial.println("Setting Reyax address (RX side)...");
  reyax.print(String("AT+ADDRESS=") + REYAX_ADDR + "\r\n");
  delay(300);
  unsigned long t0 = millis();
  while (millis() - t0 < 500) {
    while (reyax.available()) {
      String s = reyax.readStringUntil('\n');
      s.trim();
      if (s.length()) Serial.print("REYAX INIT: "), Serial.println(s);
    }
  }
}

void sendLoRaASCII(const String &payload) {
  String cmd = "AT+SEND=" + String(REYAX_TX_ADDR) + "," + String(payload.length()) + "," + payload;
  Serial.printf(">> REYAX SEND: %s\n", cmd.c_str());
  reyax.print(cmd + "\r\n");
  unsigned long t0 = millis();
  while (millis() - t0 < 300) {
    while (reyax.available()) {
      char c = (char)reyax.read();
      Serial.write(c);
    }
  }
}

// Convert hex string to bytes in-place into buffer
size_t hexToBytesToSD(const String &hex, File &f) {
  size_t L = hex.length();
  if (L % 2 != 0) {
    Serial.println("hexToBytesToSD: odd len");
    return 0;
  }
  size_t outLen = 0;
  for (size_t i = 0; i < L; i += 2) {
    char a = hex.charAt(i);
    char b = hex.charAt(i + 1);
    char tmp[3] = { a, b, 0 };
    uint8_t val = (uint8_t) strtol(tmp, NULL, 16);
    f.write(val);
    outLen++;
  }
  return outLen;
}

// Draw a simple progress bar
void drawProgressBar() {
  int barX = 10;
  int barY = tft.height() - 40;
  int barW = tft.width() - 30;
  int barH = 20;

  tft.fillRect(barX, barY, barW, barH, ILI9341_WHITE);
  tft.drawRect(barX, barY, barW, barH, ILI9341_MAGENTA);

  if (expectedSize > 0) {
    float pct = (float)receivedBytes / expectedSize;
    int fillW = (int)(barW * pct);
    tft.fillRect(barX + 1, barY + 1, fillW, barH - 2, ILI9341_BLUE);
  }
}

// Draw receiving progress on TFT (text-based)
void drawReceivingScreen() {
  tft.fillScreen(ILI9341_PINK);
  tft.setCursor(10, 20);
  tft.setTextSize(2);
  tft.setTextColor(ILI9341_BLACK);
  tft.println("Receiving image...");
  tft.setTextSize(1);
  tft.setCursor(10, 60);
  tft.print("Expected: ");
  tft.print(expectedSize);
  tft.println(" bytes");
  tft.setCursor(10, 80);
  tft.print("Received: ");
  tft.print(receivedBytes);
  tft.println(" bytes");
  uint32_t chunks = (expectedSize + CHUNK_RAW - 1) / CHUNK_RAW;
  tft.setCursor(10, 100);
  tft.print("Chunks total: ");
  tft.println(chunks);
  tft.setCursor(10, 120);
  tft.print("Progress: ");
  if (expectedSize > 0) {
    int pct = (int)((receivedBytes * 100) / expectedSize);
    tft.print(pct);
    tft.println("%");
  } else {
    tft.println("0%");
  }
  drawProgressBar();
}

// After file saved to SD, decode and render it
void renderSavedJpeg() {
  tft.fillScreen(ILI9341_BLACK);
  tft.setCursor(10, 10);
  tft.setTextColor(ILI9341_CYAN);
  tft.setTextSize(2);
  tft.println("Rendering image...");
  delay(200);

  File jpegFile = SD.open(SD_IMG_PATH, FILE_READ);
  if (!jpegFile) {
    Serial.println("Saved file not found on SD!");
    tft.setCursor(10, 40);
    tft.println("No IMG on SD");
    return;
  }

  if (JpegDec.decodeSdFile(jpegFile)) {
    uint16_t imgW = JpegDec.width;
    uint16_t imgH = JpegDec.height;
    float scaleX = (float)tft.width() / imgW;
    float scaleY = (float)tft.height() / imgH;
    uint32_t drawTime = millis();

    while (JpegDec.read()) {
      uint16_t *pImg = JpegDec.pImage;
      uint16_t mcuW = JpegDec.MCUWidth;
      uint16_t mcuH = JpegDec.MCUHeight;
      for (int y = 0; y < mcuH; y++) {
        for (int x = 0; x < mcuW; x++) {
          int imgX = JpegDec.MCUx * mcuW + x;
          int imgY = JpegDec.MCUy * mcuH + y;
          if (imgX >= imgW || imgY >= imgH) continue;
          uint16_t color = pImg[y * mcuW + x];
          int screenX = imgX * scaleX;
          int screenY = imgY * scaleY;
          tft.fillRect(screenX, screenY, scaleX + 1, scaleY + 1, color);
        }
      }
    }
    Serial.print("JPEG drawn in ");
    Serial.print(millis() - drawTime);
    Serial.println(" ms");
  } else {
    Serial.println("JPEG decode failed!");
    tft.setCursor(10, 40);
    tft.setTextColor(ILI9341_RED);
    tft.println("Decode failed!");
  }
  jpegFile.close();
}

// Parse +RCV lines and handle HDR/H:/END payloads
void handleReyaxLine(const String &lineIn) {
  String line = lineIn;
  line.trim();
  if (line.length() == 0) return;
  Serial.printf("REYAX LINE: %s\n", line.c_str());

  int eqPos = line.indexOf('=');
  if (eqPos < 0) return;

  int c1 = line.indexOf(',', eqPos + 1);
  int c2 = line.indexOf(',', c1 + 1);
  int c3 = line.indexOf(',', c2 + 1);
  if (c1 < 0 || c2 < 0) return;

  String payload;
  if (c3 >= 0) payload = line.substring(c2 + 1, c3);
  else payload = line.substring(c2 + 1);
  payload.trim();

  if (payload.length() == 0) return;

  // HDR:
  if (payload.startsWith("HDR:")) {
    expectedSize = (uint32_t) payload.substring(4).toInt();
    Serial.printf("HDR received. Expecting %u bytes. Creating SD file...\n", expectedSize);
    if (SD.exists(SD_IMG_PATH)) SD.remove(SD_IMG_PATH);
    File f = SD.open(SD_IMG_PATH, FILE_WRITE);
    if (!f) {
      Serial.println("Failed to open SD image for writing!");
      receiving = false;
      return;
    }
    f.close();
    receiving = true;
    receivedBytes = 0;
    for (uint16_t i = 0; i < MAX_CHUNKS; i++) seqReceived[i] = false;
    drawReceivingScreen();
  }
  // END
  else if (payload == "END") {
    Serial.println("END received. Closing SD file.");
    receiving = false;
    Serial.printf("Total written: %u bytes. File saved to %s\n", receivedBytes, SD_IMG_PATH);
    tft.fillScreen(ILI9341_GREEN);
    tft.setCursor(10, 10);
    tft.setTextSize(2);
    tft.setTextColor(ILI9341_BLACK);
    tft.println("Image Received!");
    drawProgressBar();
    delay(400);
    renderSavedJpeg();
  }
  // H: packet with seq and hexdata
  else if (payload.startsWith("H:")) {
    int secondColon = payload.indexOf(':', 2);
    if (secondColon < 0) return;
    String seqStr = payload.substring(2, secondColon);
    String hexdata = payload.substring(secondColon + 1);
    uint16_t seq = (uint16_t) seqStr.toInt();

    if (receiving && seq < MAX_CHUNKS && !seqReceived[seq]) {
      seqReceived[seq] = true;
      if (hexdata.length() > 0) {
        File f = SD.open(SD_IMG_PATH, FILE_APPEND);
        if (!f) {
          Serial.println("Failed to open SD append!");
          return;
        }
        size_t outLen = hexToBytesToSD(hexdata, f);
        f.flush();
        f.close();
        receivedBytes += outLen;
        Serial.printf("Wrote seq %u bytes=%u total=%u\n", seq, (unsigned)outLen, (unsigned)receivedBytes);
        drawReceivingScreen();
      }
    }
    String ack = String("ACK:") + String(seq);
    sendLoRaASCII(ack);
    Serial.printf("ACK sent for seq %u\n", seq);
  }
  // Sensor data
  else {
    Serial.printf("Other payload: %s\n", payload.c_str());
    if (line.startsWith("+RCV")) {
      int firstComma = line.indexOf(',');
      int secondComma = line.indexOf(',', firstComma + 1);
      if (firstComma > 0 && secondComma > 0) {
        String sensorPayload = line.substring(secondComma + 1);
        packetCount++;
        displaySensorPayload(sensorPayload);
      }
    }
  }
}

// === RSSI Scan ===
// === RSSI Scan (modified to match second code) ===
void scanRSSI() {
  bestRSSI = -999;
  bestAngle = 0;

  tft.fillScreen(ILI9341_BLACK);
  tft.setCursor(10, 10);
  tft.setTextColor(ILI9341_YELLOW);
  tft.setTextSize(2);
  tft.println("Finding RSSI...");

  for (int angle = 0; angle <= 180; angle += stepAngle) {
    antennaServo.write(angle);
    delay(scanDelay);

    int currentRSSI = -999;
    String msg = "";
    unsigned long timeout = millis() + 2000;

    while (millis() < timeout) {
      if (reyax.available()) {
        msg = reyax.readStringUntil('\n');
        msg.trim();
        if (msg.startsWith("+RCV")) {
          int commas[4], count = 0;
          for (int i = 0; i < msg.length(); i++) {
            if (msg.charAt(i) == ',' && count < 4) commas[count++] = i;
          }
          if (count >= 3) {
            String rssiStr = msg.substring(commas[2] + 1, commas[3]);
            currentRSSI = rssiStr.toInt();

            // Payload check "Hi"
            String payload = msg.substring(commas[3] + 1);
            if (payload.indexOf("Hi") != -1) {
              if (currentRSSI > bestRSSI) {
                bestRSSI = currentRSSI;
                bestAngle = angle;
              }
            }
          }
          break; // exit while after reading one +RCV line
        }
      }
    }

    // Update TFT with current scan status
    tft.fillRect(0, 40, 240, 90, ILI9341_BLACK);
    tft.setCursor(10, 40);
    tft.setTextColor(ILI9341_WHITE);
    tft.setTextSize(2);
    tft.println("Angle: " + String(angle) + "Â°");

    tft.setCursor(10, 70);
    tft.setTextColor(ILI9341_CYAN);
    tft.println("RSSI: " + String(currentRSSI));
  }

  antennaServo.write(bestAngle);

  tft.fillRect(0, 160, 240, 70, ILI9341_BLACK);
  tft.setCursor(10, 180);
  tft.setTextColor(ILI9341_WHITE);
  tft.setTextSize(2);
  tft.println("Best Angle: " + String(bestAngle) + "Â°");

  tft.setCursor(10, 210);
  tft.setTextColor(ILI9341_WHITE);
  tft.println("Best RSSI: " + String(bestRSSI));

  delay(2000);
}


// === Helper to parse and display payload ===
void displaySensorPayload(String payload) {
  String fields[11];
  int fieldIndex = 0;
  int lastComma = -1;

  for (int i = 0; i < payload.length() && fieldIndex < 11; i++) {
    if (payload.charAt(i) == ',') {
      fields[fieldIndex] = payload.substring(lastComma + 1, i);
      lastComma = i;
      fieldIndex++;
    }
  }
  if (fieldIndex < 11) {
    fields[fieldIndex] = payload.substring(lastComma + 1);
  }

  tft.fillRect(0, 80, 240, 140, ILI9341_BLACK);
  tft.setCursor(10, 90);
  tft.setTextColor(ILI9341_YELLOW);
  tft.setTextSize(2);
  tft.println("Pkt " + String(packetCount));

  tft.setCursor(10, 120);
  tft.setTextColor(ILI9341_WHITE);
  tft.setTextSize(1);
  tft.println("Accel: X=" + fields[0] + " Y=" + fields[1] + " Z=" + fields[2]);

  tft.setCursor(10, 140);
  tft.println("Gyro: X=" + fields[3] + " Y=" + fields[4] + " Z=" + fields[5]);

  tft.setCursor(10, 160);
  tft.println("BMP: T=" + fields[6] + " P=" + fields[7] + " A=" + fields[8]);

  tft.setCursor(10, 180);
  tft.println("DHT: T=" + fields[9] + " H=" + fields[10]);
}

// === Setup ===
void setup() {
  Serial.begin(115200);
  delay(50);
  Serial.println("\nRX (TFT) starting...");

  // TFT init
  tft.begin();
  tft.setRotation(1);
  tft.fillScreen(ILI9341_BLACK);
  tft.setTextColor(ILI9341_CYAN);
  tft.setTextSize(2);
  tft.setCursor(10, 10);
  tft.println("RX System Booting...");

  // SD init
  if (!SD.begin(SD_CS)) {
    Serial.println("SD card init failed!");
    tft.setCursor(10, 40);
    tft.setTextColor(ILI9341_RED);
    tft.setTextSize(2);
    tft.println("SD init failed!");
    while (1) delay(1000);
  } else {
    Serial.println("SD initialized.");
  }

  // Reyax init
  setupReyax();

  // Servo init
  antennaServo.attach(SERVO_PIN);
  
  // Ready screen
  tft.fillScreen(ILI9341_BLACK);
  tft.setCursor(10, 10);
  tft.setTextColor(ILI9341_CYAN);
  tft.setTextSize(2);
  tft.println("RX Ready - Waiting for LoRa");
}

// === Loop ===
// === Global flag ===
bool systemHalted = false;

// === Loop ===
void loop() {
  if (systemHalted) {
    // Do absolutely nothing, freeze system in last state
    return;
  }

  // Phase 1: one-time RSSI scan
  if (packetCount == 0) {
    scanRSSI();
    packetCount = 1; // mark scan done
    tft.fillScreen(ILI9341_BLACK);
    tft.setCursor(20, 40);
    tft.setTextColor(ILI9341_CYAN);
    tft.setTextSize(2);
    tft.println("Entering Data Rx Mode...");
  }

  // Phase 2: Handle incoming LoRa data
  while (reyax.available()) {
    String msg = reyax.readStringUntil('\n');
    msg.trim();
    if (msg.length() > 0) {
      handleReyaxLine(msg);

      // If image completed OR decode failed, stop forever
      if (!receiving && expectedSize > 0) {
        Serial.println("Halting system after image transfer.");
        systemHalted = true;
        return;
      }
    }
  }
}


-----------------------------------------------------------------------------------------------------------------------------------------------


//cam
