#include <Adafruit_GFX.h>
#include <Adafruit_ILI9341.h>
#include <SPI.h>
#include <DHT.h>

// TFT Pins
#define TFT_CS   5
#define TFT_DC   2
#define TFT_RST  4

// LoRa UART
#define LORA_RX 16
#define LORA_TX 17

// DHT11 Sensor
#define DHTPIN 21
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_RST);
HardwareSerial LoRaSerial(1);

unsigned long lastSendTime = 0;
const unsigned long sendInterval = 5000;

String extractMessage(String raw) {
  int a = raw.indexOf(',');
  int b = raw.indexOf(',', a + 1);
  int c = raw.indexOf(',', b + 1);
  return raw.substring(b + 1, c);
}

void setup() {
  Serial.begin(115200);
  LoRaSerial.begin(115200, SERIAL_8N1, LORA_RX, LORA_TX);
  dht.begin();

  tft.begin();
  tft.setSPISpeed(10000000);
  tft.writeCommand(ILI9341_SWRESET);
  delay(1500);
  tft.setRotation(1);
  tft.fillScreen(ILI9341_PINK);

  tft.setTextColor(ILI9341_WHITE);
  tft.setTextSize(2);
  tft.setCursor(10, 10);
  tft.println("LoRa DHT11 Monitor");
}

void loop() {
  // Receive LoRa Data
  if (LoRaSerial.available()) {
    String raw = LoRaSerial.readStringUntil('\n');
    if (raw.startsWith("+RCV")) {
      String msg = extractMessage(raw);
      Serial.println("LoRa IN: " + msg);

      tft.fillRect(0, 60, 240, 30, ILI9341_BLACK);
      tft.setCursor(10, 60);
      tft.setTextColor(ILI9341_YELLOW);
      tft.print("Remote: ");
      tft.println(msg);
    }
  }

  // Send DHT11 data every 5 sec
  if (millis() - lastSendTime > sendInterval) {
    float temp = dht.readTemperature();
    float humi = dht.readHumidity();

    if (!isnan(temp) && !isnan(humi)) {
      String payload = "Temp:" + String(temp) + "C,Hum:" + String(humi) + "%";
      String command = "AT+SEND=0," + String(payload.length()) + "," + payload;
      LoRaSerial.println(command);
      Serial.println("LoRa OUT: " + payload);

      tft.fillRect(0, 100, 240, 30, ILI9341_BLACK);
      tft.setCursor(10, 100);
      tft.setTextColor(ILI9341_CYAN);
      tft.print("You: ");
      tft.println(payload);
    }

    lastSendTime = millis();
  }
}
