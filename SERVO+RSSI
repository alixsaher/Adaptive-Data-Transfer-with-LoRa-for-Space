\\TX HERE A DEV WHERE LORA CONNECTED TO TX2 RX2
#include <HardwareSerial.h>

HardwareSerial LoRaSerial(1);

#define LORA_TX 17
#define LORA_RX 16

void setup() {
  Serial.begin(115200);
  LoRaSerial.begin(115200, SERIAL_8N1, LORA_RX, LORA_TX);
  Serial.println("üöÄ LoRa TX Started");
  delay(2000); // Wait for LoRa module to initialize

  // Optional: Set address to 9
  LoRaSerial.println("AT+ADDRESS=9");
  delay(500);
}

void loop() {
  LoRaSerial.println("AT+SEND=18,5,Hello");
  Serial.println("üì§ Sent: Hello ‚Üí 18");
  delay(2000); // Send every 2 seconds
}

------------------------------------------------------------------------------------------------------

\\RX:(HERE AN ESP32 WROOM + SERVO AT 13)
#include <HardwareSerial.h>
#include <ESP32Servo.h>

HardwareSerial LoRaSerial(1);
Servo antennaServo;

// === Pin Configuration ===
#define SERVO_PIN 13       // Servo control pin
        // ESP32 TX ‚Üí LoRa RX

// === Servo Scan Settings ===
const int stepAngle = 15;        // Degrees per step
const int scanDelay = 3000;      // Wait per angle to receive LoRa
int bestRSSI = -999;
int bestAngle = 0;

void setup() {
  Serial.begin(115200);
  LoRaSerial.begin(115200, SERIAL_8N1, 4, 5);   //CONNECT LIKE BEFORE USING LORA KA TX TO 4 AND RX TO 5
  antennaServo.attach(SERVO_PIN);

  Serial.println("üöÄ Starting RSSI Servo Scan...");
  delay(2000); // Let LoRa module boot
}

void loop() {
  bestRSSI = -999;
  bestAngle = 0;

  for (int angle = 0; angle <= 180; angle += stepAngle) {
    antennaServo.write(angle);
    Serial.println("üîÑ Scanning Angle: " + String(angle));
    delay(scanDelay);  // Wait for packet

    String msg = "";
    unsigned long timeout = millis() + 2500;
    while (millis() < timeout) {
      if (LoRaSerial.available()) {
        msg = LoRaSerial.readStringUntil('\n');
        msg.trim();
        Serial.println("üì© " + msg);

        // === Accurate +RCV Parsing ===
        if (msg.startsWith("+RCV")) {
          int commas[5];
          int count = 0;
          for (int i = 0; i < msg.length(); i++) {
            if (msg.charAt(i) == ',') {
              commas[count++] = i;
              if (count == 4) break;
            }
          }

          if (count >= 4) {
            String rssiStr = msg.substring(commas[2] + 1, commas[3]);
            int rssi = rssiStr.toInt();
            Serial.println("üì∂ RSSI: " + String(rssi));

            if (rssi > bestRSSI) {
              bestRSSI = rssi;
              bestAngle = angle;
              Serial.println("‚úÖ New Best: " + String(bestRSSI) + " at " + String(bestAngle) + "¬∞");
            }
          }

          break; // Exit timeout loop after successful parse
        }
      }
    }
  }

  // === Move to Best Angle After Scan ===
  Serial.println("üèÅ Best Angle: " + String(bestAngle) + "¬∞ | Best RSSI: " + String(bestRSSI));
  antennaServo.write(bestAngle);

  delay(10000); // Pause before next scan
}
